#!/usr/bin/env python
from __future__ import print_function
import pygments
from pygments import highlight
from pygments.lexers import get_lexer_for_filename
from pygments.formatters import HtmlFormatter
from pygments.token import Text, Comment, Operator, Keyword, Name, String, \
    Number, Punctuation
from pygments.lexer import Lexer, RegexLexer, include, bygroups, using, \
    this, combined, default, words
import argparse
import os 

source_path = os.path.relpath(os.path.dirname(__file__))

html_template = '''<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">

<html>
<head>
  <title></title>
  <meta http-equiv="content-type" content="text/html; charset=None">
  <link rel="stylesheet" href="{css}" type="text/css">
</head>
<body>
{content}
</body>
'''

class AnglicanLexer(RegexLexer):
    """
    Lexer for `Anglican <https://bitbucket.org/probprog/anglican/>`_ source code.
    """
    name = 'Anglican'
    aliases = ['anglican', 'ang']
    filenames = ['*.clj']
    mimetypes = ['text/x-clojure', 'application/x-clojure']

    inference_forms = (
        'sample', 'observe', 'predict', 'factor', 'doquery', 'infer')

    special_forms = (
        # clojure macros
        '.', 'do', 'fn', 'if', 'let', 'new', 'quote', 'var', 'loop',
        '->', '->>', '..', 'amap', 'and', 'areduce', 'as->', 'assert', 'binding', 
        'bound-fn', 'case', 'comment', 'cond', 'cond->', 'cond->>', 'condp',  
        'delay', 'doseq', 'dosync', 'dotimes', 
        'doto', 'extend-protocol', 'extend-type', 'fn', 'for', 'future', 'gen-class', 
        'gen-interface', 'if', 'if-let', 'if-not', 'if-some', 'import', 'io!', 'lazy-cat', 'lazy-seq', 'let', 
        'letfn', 'locking', 'loop', 'memfn', 'or', 'proxy', 'proxy-super', 'pvalues', 
        'recur', 'refer-clojure', 'reify', 'some->', 'some->>', 'sync', 'time', 'when', 'when-first', 
        'when-let', 'when-not', 'when-some', 'while', 'with-bindings', 'with-in-str', 
        'with-loading-context', 'with-local-vars', 'with-open', 'with-out-str', 
        'with-precision', 'with-redefs'        
    )

    declarations = (
        # clojure declarations
        'def', 'def-', 'defn', 'defn-', 'defmacro', 'defmulti', 'defmethod',
        'defstruct', 'defonce', 'declare', 'definline', 'definterface',
        'defprotocol', 'defrecord', 'defstruct', 'deftype', 'defproject', 'ns',
        # anglican declarations
        'defquery', 'defm'
    )

    builtins = (
        # clojure primitives
        '*', '+', '-', '*\'', '+\'', '-\'', '->ArrayChunk', '->Vec', '->VecNode',
        '->VecSeq', '-cache-protocol-fn', '-reset-methods', '/', '<', '<=', '=', '==', '>', '>=', 
        'accessor', 'aclone', 'add-classpath', 'add-watch', 'agent', 'agent-error', 
        'agent-errors', 'aget', 'alength', 'alias', 'all-ns', 'alter', 'alter-meta!', 
        'alter-var-root', 'ancestors', 'apply', 'array-map', 'aset', 'aset-boolean', 'aset-byte', 
        'aset-char', 'aset-double', 'aset-float', 'aset-int', 'aset-long', 'aset-short', 'assoc', 
        'assoc!', 'assoc-in', 'associative?', 'atom', 'await', 'await-for', 'await1', 'bases', 'bean', 
        'bigdec', 'bigint', 'biginteger', 'bit-and', 'bit-and-not', 'bit-clear', 'bit-flip', 
        'bit-not', 'bit-or', 'bit-set', 'bit-shift-left', 'bit-shift-right', 'bit-test', 
        'bit-xor', 'boolean', 'boolean-array', 'booleans', 'bound-fn*', 'bound?', 'butlast', 'byte', 
        'byte-array', 'bytes', 'cast', 'char', 'char-array', 'char?', 'chars', 'chunk', 
        'chunk-append', 'chunk-buffer', 'chunk-cons', 'chunk-first', 'chunk-next', 'chunk-rest', 
        'chunked-seq?', 'class', 'class?', 'clear-agent-errors', 'clojure-version', 'coll?', 
        'commute', 'comp', 'comparator', 'compare', 'compare-and-set!', 'compile', 'complement', 
        'concat', 'conj', 'conj!', 'cons', 'constantly', 'construct-proxy', 'contains?', 'count', 
        'counted?', 'create-ns', 'create-struct', 'cycle', 'dec', 'dec\'', 'decimal?', 'delay?', 
        'deliver', 'denominator', 'deref', 'derive', 'descendants', 'destructure', 'disj', 'disj!', 
        'dissoc', 'dissoc!', 'distinct', 'distinct?', 'doall', 'dorun', 'double', 'double-array', 
        'doubles', 'drop', 'drop-last', 'drop-while', 'empty', 'empty?', 'ensure', 
        'enumeration-seq', 'error-handler', 'error-mode', 'eval', 'even?', 'every-pred', 'every?', 
        'ex-data', 'ex-info', 'extend', 'extenders', 'extends?', 'false?', 'ffirst', 'file-seq', 
        'filter', 'filter-ns-publics', 'filterv', 'find', 'find-keyword', 'find-ns', 
        'find-protocol-impl', 'find-protocol-method', 'find-var', 'first', 'flatten', 'float', 
        'float-array', 'float?', 'floats', 'flush', 'fn?', 'fnext', 'fnil', 'force', 'format', 
        'frequencies', 'future-call', 'future-cancel', 'future-cancelled?', 'future-done?', 
        'future?', 'gensym', 'get', 'get-in', 'get-method', 'get-proxy-class', 
        'get-thread-bindings', 'get-validator', 'group-by', 'hash', 'hash-combine', 'hash-map', 
        'hash-ordered-coll', 'hash-set', 'hash-unordered-coll', 'identical?', 'identity', 
        'ifn?', 'in-ns', 'inc', 'inc\'', 'init-proxy', 'instance?', 'int', 'int-array', 'integer?', 
        'interleave', 'intern', 'interpose', 'into', 'into-array', 'ints', 'isa?', 'iterate', 
        'iterator-seq', 'juxt', 'keep', 'keep-indexed', 'key', 'keys', 'keyword', 'keyword?', 'last', 
        'line-seq', 'list', 'list*', 'list?', 'load', 'load-file', 'load-reader', 'load-string', 
        'loaded-libs', 'long', 'long-array', 'longs', 'macroexpand', 'macroexpand-1', 
        'make-array', 'make-hierarchy', 'map', 'map-indexed', 'map?', 'mapcat', 'mapv', 'max', 
        'max-key', 'memoize', 'merge', 'merge-with', 'meta', 'method-sig', 'methods', 'min', 
        'min-key', 'mix-collection-hash', 'mod', 'munge', 'name', 'namespace', 'namespace-munge', 
        'neg?', 'newline', 'next', 'nfirst', 'nil?', 'nnext', 'not', 'not-any?', 'not-empty', 
        'not-every?', 'not=', 'ns-aliases', 'ns-functions', 'ns-imports', 'ns-interns', 
        'ns-macros', 'ns-map', 'ns-name', 'ns-publics', 'ns-refers', 'ns-resolve', 'ns-unalias', 
        'ns-unmap', 'nth', 'nthnext', 'nthrest', 'num', 'number?', 'numerator', 'object-array', 
        'odd?', 'parents', 'partial', 'partition', 'partition-all', 'partition-by', 'pcalls', 
        'peek', 'persistent!', 'pmap', 'pop', 'pop!', 'pop-thread-bindings', 'pos?', 'pr', 'pr-str', 
        'prefer-method', 'prefers', 'print', 'print-ctor', 'print-simple', 'print-str', 'printf', 
        'println', 'println-str', 'prn', 'prn-str', 'promise', 'proxy-call-with-super', 
        'proxy-mappings', 'proxy-name', 'push-thread-bindings', 'quot', 'rand', 'rand-int', 
        'rand-nth', 'range', 'ratio?', 'rational?', 'rationalize', 're-find', 're-groups', 
        're-matcher', 're-matches', 're-pattern', 're-seq', 'read', 'read-line', 'read-string', 
        'realized?', 'record?', 'reduce', 'reduce-kv', 'reduced', 'reduced?', 'reductions', 'ref', 
        'ref-history-count', 'ref-max-history', 'ref-min-history', 'ref-set', 'refer', 
        'release-pending-sends', 'rem', 'remove', 'remove-all-methods', 'remove-method', 
        'remove-ns', 'remove-watch', 'repeat', 'repeatedly', 'replace', 'replicate', 'require', 
        'reset!', 'reset-meta!', 'resolve', 'rest', 'restart-agent', 'resultset-seq', 'reverse', 
        'reversible?', 'rseq', 'rsubseq', 'satisfies?', 'second', 'select-keys', 'send', 'send-off', 
        'send-via', 'seq', 'seq?', 'seque', 'sequence', 'sequential?', 'set', 
        'set-agent-send-executor!', 'set-agent-send-off-executor!', 'set-error-handler!', 
        'set-error-mode!', 'set-validator!', 'set?', 'short', 'short-array', 'shorts', 'shuffle', 
        'shutdown-agents', 'slurp', 'some', 'some-fn', 'some?', 'sort', 'sort-by', 'sorted-map', 
        'sorted-map-by', 'sorted-set', 'sorted-set-by', 'sorted?', 'special-symbol?', 'spit', 
        'split-at', 'split-with', 'str', 'string?', 'struct', 'struct-map', 'subs', 'subseq', 
        'subvec', 'supers', 'swap!', 'symbol', 'symbol?', 'take', 'take-last', 'take-nth', 
        'take-while', 'test', 'the-ns', 'thread-bound?', 'to-array', 'to-array-2d', 'trampoline', 
        'transient', 'tree-seq', 'true?', 'type', 'unchecked-add', 'unchecked-add-int', 
        'unchecked-byte', 'unchecked-char', 'unchecked-dec', 'unchecked-dec-int', 
        'unchecked-divide-int', 'unchecked-double', 'unchecked-float', 'unchecked-inc', 
        'unchecked-inc-int', 'unchecked-int', 'unchecked-long', 'unchecked-multiply', 
        'unchecked-multiply-int', 'unchecked-negate', 'unchecked-negate-int', 
        'unchecked-remainder-int', 'unchecked-short', 'unchecked-subtract', 
        'unchecked-subtract-int', 'underive', 'unsigned-bit-shift-right', 'update-in', 
        'update-proxy', 'use', 'val', 'vals', 'var-get', 'var-set', 'var?', 'vary-meta', 'vec', 
        'vector', 'vector-of', 'vector?', 'with-bindings*', 'with-meta', 'with-redefs-fn', 
        'xml-seq', 'zero?', 'zipmap',
        # anglican primitives
        '->CRP-process', '->DP-process', '->GP-process', 
        '->bernoulli-distribution', '->beta-distribution', '->binomial-distribution', 
        '->categorical-crp-distribution', '->categorical-distribution', 
        '->categorical-dp-distribution', '->chi-squared-distribution', 
        '->dirichlet-distribution', '->discrete-distribution', 
        '->exponential-distribution', '->flip-distribution', '->gamma-distribution', 
        '->mvn-distribution', '->normal-distribution', '->poisson-distribution', 
        '->uniform-continuous-distribution', '->uniform-discrete-distribution', 
        '->wishart-distribution', 'CRP', 'DP', 'GP', 'abs', 'absorb', 'acos', 'asin', 'atan', 
        'bernoulli', 'beta', 'binomial', 'categorical', 'categorical-crp', 'categorical-dp', 
        'cbrt', 'ceil', 'chi-squared', 'cos', 'cosh', 'cov', 'dirichlet', 'discrete', 'exp', 
        'exponential', 'flip', 'floor', 'gamma', 'gen-matrix', 'log', 'log-gamma-fn', 
        'log-mv-gamma-fn', 'log-sum-exp', 'map->CRP-process', 'map->DP-process', 
        'map->GP-process', 'map->bernoulli-distribution', 'map->beta-distribution', 
        'map->binomial-distribution', 'map->categorical-crp-distribution', 
        'map->categorical-distribution', 'map->categorical-dp-distribution', 
        'map->chi-squared-distribution', 'map->dirichlet-distribution', 
        'map->discrete-distribution', 'map->exponential-distribution', 
        'map->flip-distribution', 'map->gamma-distribution', 'map->mvn-distribution', 
        'map->normal-distribution', 'map->poisson-distribution', 
        'map->uniform-continuous-distribution', 'map->uniform-discrete-distribution', 
        'map->wishart-distribution', 'mvn', 'normal', 'observe', 'poisson', 'pow', 'produce', 
        'rint', 'round', 'sample', 'signum', 'sin', 'sinh', 'sqrt', 'tag', 'tan', 'tanh', 'transform-sample', 
        'uniform-continuous', 'uniform-discrete', 'wishart')

    # valid names for identifiers
    # well, names can only not consist fully of numbers
    # but this should be good enough for now

    # TODO / should divide keywords/symbols into namespace/rest
    # but that's hard, so just pretend / is part of the name
    valid_name = r'(?!#)[\w!$%*+<=>?/.#-]+'

    tokens = {
        'root': [
            # the comments - always starting with semicolon
            # and going to the end of the line
            (r';.*$', Comment.Single),

            # whitespaces - usually not relevant
            (r'[,\s]+', Text),

            # numbers
            (r'-?\d+\.\d+', Number.Float),
            (r'-?\d+', Number.Integer),
            (r'0x-?[abcdef\d]+', Number.Hex),

            # strings, symbols and characters
            (r'"(\\\\|\\"|[^"])*"', String),
            (r"'" + valid_name, String.Symbol),
            (r"\\(.|[a-z]+)", String.Char),

            # keywords
            (r'::?#?' + valid_name, String.Symbol),

            # special operators
            (r'~@|[`\'#^~&@]', Operator),

            # highlight the special forms
            (words(special_forms, suffix=' '), Keyword),

            # Technically, only the special forms are 'keywords'. The problem
            # is that only treating them as keywords means that things like
            # 'defn' and 'ns' need to be highlighted as builtins. This is ugly
            # and weird for most styles. So, as a compromise we're going to
            # highlight them as Keyword.Declarations.
            (words(declarations, suffix=' '), Keyword.Declaration),

            # Anglican inference special forms
            (words(inference_forms, suffix=' '), Keyword.Reserved),

            # highlight the builtins
            (words(builtins, suffix=' '), Name.Builtin),

            # the remaining functions
            (r'(?<=\()' + valid_name, Name.Function),

            # find the remaining variables
            (valid_name, Name.Variable),

            # Clojure accepts vector notation
            (r'(\[|\])', Punctuation),

            # Clojure accepts map notation
            (r'(\{|\})', Punctuation),

            # the famous parentheses!
            (r'(\(|\))', Punctuation),
        ],
    }

parser = argparse.ArgumentParser(description='Performs syntax highlighting with Pygments using a custom css file.')
parser.add_argument('source', metavar='FILENAME', type=str,
                     help='Source filename.')
parser.add_argument('-o', dest='output', metavar='FILENAME',
                    default=None, help='Output filename. Prints to standard out if not specified')
parser.add_argument('-s', dest='style', metavar='FILENAME',
                    default=os.path.join(source_path, 'anglican.css'),
                    help='Style to use for syntax highlighting. May be a pygments builtin or CSS style sheet.')
parser.add_argument('-p', dest='prestyles', metavar='ATTRIBUTES',
                    default='font-family: Consolas; font-size: 26px; line-height: 110%',
                    help='Inline styles to use for <pre> element.')

if __name__ == '__main__':
    args = parser.parse_args()
    lexer = get_lexer_for_filename(args.source)
    if isinstance(lexer, pygments.lexers.ClojureLexer):
        lexer = AnglicanLexer()
    code = open(args.source, 'r').read()        
    if os.path.isfile(args.style):
        formatter = HtmlFormatter(full=False, prestyles=args.prestyles)
        div = highlight(code, lexer, formatter)
        html = html_template.format(css=args.style, content=div)
    else:
        formatter = HtmlFormatter(full=True, style=args.style, prestyles=args.prestyles)
        html = highlight(code, lexer, formatter)    
    if args.output:
        f = open(args.output, 'w')
        f.write(html)
        f.close()
    else:
        print(html)
